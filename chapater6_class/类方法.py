#_*_cording.utf-8_*_
# 开发团队:开心科研
# 开发人员:Administrator
# 开发时间:2021/7/3 000313:31
# 文件名称:类方法
# 开发工具:PyCharm
"""
实例方法：
    通常情况下，在类中定义的方法默认都是实例方法
类方法：
    Python 类方法和实例方法相似，它最少也要包含一个参数，只不过类方法中通常将其命名为 cls
    Python 会自动将类本身绑定给 cls 参数（注意，绑定的不是类对象）。也就是说，我们在调用类方法时，无需显式为 cls 参数传参
    类方法推荐使用类名直接调用，当然也可以使用实例对象来调用（不推荐）
    和实例方法最大的不同在于，类方法需要使用＠classmethod修饰符进行修饰，如果没有修饰，就是实例方法
类静态方法：
    静态方法，其实就是我们学过的函数，和函数唯一的区别是，
    静态方法定义在类这个空间（类命名空间）中，而函数则定义在程序所在的空间（全局命名空间）中。
    静态方法没有类似 self、cls 这样的特殊参数，因此 Python 解释器不会对它包含的参数做任何类或对象的绑定。
    也正因为如此，类的静态方法中无法调用任何类属性和类方法(存在争议，可以调用，但一般不调用）
    静态方法需要使用＠staticmethod修饰
    静态方法 也能够通过 实例对象 和 类去访问
"""
class Person:
    age=18

    # 实例方法
    # 实例方法最大的特点就是，它最少也要包含一个 self 参数，用于绑定调用此方法的实例对象（Python 会自动完成绑定）。
    # 实例方法通常会用类对象直接调用
    def show(self):
        print('-------》',self.age)

    # Python 类方法和实例方法相似，它最少也要包含一个参数，只不过类方法中通常将其命名为 cls，
    # Python 会自动将类本身绑定给 cls 参数（注意，绑定的不是类对象）。也就是说，我们在调用类方法时，无需显式为 cls 参数传参。
    @classmethod
    # 和实例方法最大的不同在于，类方法需要使用＠classmethod修饰符进行修饰，如果没有修饰，就是实例方法
    # 类方法推荐使用类名直接调用，当然也可以使用实例对象来调用（不推荐）
    # 在方法内部，可以通过 cls. 调用类属性；通过 cls. 也可以调用其他类的方法；
    # 在类方法内部可以直接使用cls 访问类属性或者其他的类方法；
    def info(cls):
        print(cls)     # <class '__main__.Person'>
        print(cls.age)
        print('此时正在调用类方法')

    @staticmethod
    def display_info(name, add):
        print(Person.age)
        print(name, add)

p =Person()
p.show()
# 如果使用 对象.类属性=值 赋值语句，只会给对象添加一个属性，而不会影响到类属性的值；
p.age=p.age+1
print(Person.age)  # 18
p.show()           # 19
# #使用类对象调用类方法
p.info()          # <class '__main__.Person'>   18
# Python 也支持使用类名调用实例方法，但此方式需要手动给 self 参数传值
Person.show(p)
# #使用类名直接调用类方法
Person.info()   # 调用类方法，此时不需要传对象参数


p.display_info('hejunran',23)